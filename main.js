/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_content_fns__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/content-fns */ \"./src/modules/content-fns.js\");\n/* harmony import */ var _modules_display_fns__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/display-fns */ \"./src/modules/display-fns.js\");\n/* harmony import */ var _modules_listener_fns__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/listener-fns */ \"./src/modules/listener-fns.js\");\n/* harmony import */ var _modules_data_fns__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules/data-fns */ \"./src/modules/data-fns\");\n/* harmony import */ var _modules_data_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modules/data.js */ \"./src/modules/data.js\");\n\n\n\n\n\n\n\n\nconst displayCtrlr = (() => {\n\n  _modules_display_fns__WEBPACK_IMPORTED_MODULE_1__.setMainPanel();\n  _modules_display_fns__WEBPACK_IMPORTED_MODULE_1__.setProjPanel(_modules_data_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].projects);\n  _modules_display_fns__WEBPACK_IMPORTED_MODULE_1__.hlNavSelection();\n\n  _modules_listener_fns__WEBPACK_IMPORTED_MODULE_2__.addMenuToggListener('click', _modules_display_fns__WEBPACK_IMPORTED_MODULE_1__.toggleMenu);\n  _modules_listener_fns__WEBPACK_IMPORTED_MODULE_2__.addNavListListeners('click', _modules_display_fns__WEBPACK_IMPORTED_MODULE_1__.manageNavResponse);\n  _modules_listener_fns__WEBPACK_IMPORTED_MODULE_2__.addPageBtnListeners('click', _modules_display_fns__WEBPACK_IMPORTED_MODULE_1__.managePageBtns);\n\n  // let currentDisplay = data.navSelection;\n  // highlight2(document.getElementById(currentDisplay));\n  // display.setMain(currentDisplay);\n\n  // display.setNav(data.projects);\n\n  // listenersCtrlr.addMenuToggListener();\n  // listenersCtrlr.addThemeToggListener();\n  // listenersCtrlr.addPageBtnListeners();\n  // listenersCtrlr.addNavListsListeners();\n})();\n\n\n\n\n\n\n// import {\n//   getDay,\n//   isThisWeek,\n//   isToday,\n//   parseISO\n// } from \"date-fns\";\n// import content from './modules/content.js';\n\n// const dataController = (() => {\n//   let currentProjects = !JSON.parse(localStorage.getItem('projects')) \n//     ? [] \n//     : JSON.parse(localStorage.getItem('projects'));\n\n//   let currentNavSelection = !localStorage.getItem('display')\n//     ? 'all' \n//     : localStorage.getItem('display'); \n\n\n//   const initNewItem = (input) => {\n//     let item, container, idPrefix;\n  \n//     if (input === 'submit-project') {\n//       const projName = document.querySelector(\"#project-name-input\").value;\n//       item = new Project(projName);\n//       container = dataController.currentProjects;\n//       idPrefix = 'project-'\n//     } else if (input === 'submit-task') {\n//       const taskName = document.querySelector('#task-name-input').value;\n//       const taskDetails = document.querySelector('#task-details-input').value;\n//       const taskDue = document.querySelector('#task-date-input').value;\n//       const taskImportant = document.querySelector('#task-important-input').checked;\n//       let selectedProject = document.querySelector('main').dataset.selected;\n//       item = new Task(taskName, taskDetails, taskDue, taskImportant)\n  \n//       dataController.currentProjects.forEach(proj => {\n//         if (proj.id === selectedProject) {\n//           container = proj.tasks;\n//           idPrefix = `${proj.id}-task-`;\n//         }\n//       })\n//     }\n  \n//     add(item, container);\n//     setId(idPrefix, container);\n//     populateLocalStorage(currentProjects);\n  \n//     return container;\n//   }\n\n//   const deleteItem = (item, container) => {\n//     remove(item, container);\n//     populateLocalStorage(currentProjects);\n  \n//     return container;\n//   }\n\n//   const filterTasks = (filter) => {\n//     let filteredTasks = [];\n  \n//     switch (filter) {\n//       case 'all':\n//         currentProjects.forEach(proj => {\n//           proj.tasks.forEach(task => {\n//             filteredTasks.push(task);\n//           });\n//         });\n//         break;\n//       case 'today':\n//         currentProjects.forEach(proj => {\n//           proj.tasks.forEach(task => {\n//             if (isToday(parseISO(task.due))) {\n//               filteredTasks.push(task);\n//             }\n//           });\n//         });\n//         break;\n//       case 'week':\n//         currentProjects.forEach(proj => {\n//           proj.tasks.forEach(task => {\n//             if (task.due) {\n//               if (isThisWeek(parseISO(task.due), {weekStartsOn: getDay(new Date())})) {\n//                 filteredTasks.push(task);\n//               }\n//             }\n//           });\n//         });\n//         break;\n//       case 'important':\n//         currentProjects.forEach(proj => {\n//           proj.tasks.forEach(task => {\n//             if (task.important) {\n//               filteredTasks.push(task);\n//             }\n//           });\n//         });\n//         break;\n//       default:\n//         currentProjects.forEach(proj => {\n//           if (proj.id === filter) {\n//             filteredTasks = proj.tasks;\n//           }\n//         })\n//     }\n  \n//     return filteredTasks;\n//   }\n\n//   const populateLocalStorage = (input) => {\n\n//     if (typeof input === 'object') {\n//       localStorage.setItem('projects', JSON.stringify(input));\n//     } else {\n//       localStorage.setItem('display', input);\n//     }\n    \n//   };\n\n\n//   // Delete???\n//   const saveNavSelection = (input) => {\n//     currentNavSelection = input;\n//     populateLocalStorage(input);\n//     console.log(currentNavSelection);\n//   }\n\n\n//   /* Object constructors */\n//   function Project(name) {\n//     this.name = name;\n//     this.tasks = [];\n//   }\n\n//   function Task(name, details, due, important) {\n//     this.name = name;\n//     this.details = details;\n//     this.due = due;\n//     this.important = important;\n//     this.completed = false;\n//   }\n\n//   /* Helper functions */\n//   // Add task/proj items\n//   const add = (obj, arr) => {\n//     arr.push(obj);\n//   }\n\n//   // Delete task/proj items\n//   const remove = (objId, arr) => {\n//     for (let i = 0; i < arr.length; i++) {\n//       if (arr[i].id === objId) {\n//         arr.splice(i, 1);\n//       }\n//     }\n//   }\n\n//   // Set task/proj id's after adding to list\n//   const setId = (prefix, arr) => {\n//     for (let i = 0; i < arr.length; i++) {\n//       arr[i].id = prefix + i;\n//     }\n//   }\n\n//   return {\n//     currentProjects,\n//     currentNavSelection,\n//     // updateData,\n//     initNewItem,\n//     deleteItem,\n//     filterTasks,\n//     populateLocalStorage,\n//     // saveNavSelection\n//   }\n// })();\n\n// const displayController = (() => {\n\n\n//   // Set initial display to \"All\"\n//   function ctrlAddTaskBtn(input) {\n//     const addTaskBtn = document.querySelector('main > button');\n\n//     switch (input) {\n//     case 'all':\n//     case 'today':\n//     case 'week':\n//     case 'important':\n//       addTaskBtn.classList.add('hidden');\n//       break;\n//     default:\n//       addTaskBtn.classList.remove('hidden');\n//     }\n//   }\n//   // Highlight displayed nav selection \n//   let highlighted;\n//   function highlight(item) {\n//     if (highlighted) {\n//       highlighted.classList.remove('highlight');\n//     }\n\n//     highlighted = item;\n//     highlighted.classList.add('highlight');\n//   }\n\n//   let selection = dataController.currentNavSelection;\n//   setMainHeader(selection);\n//   document.querySelector('main').dataset.selected = selection;\n//   display(dataController.filterTasks(selection));\n//   ctrlAddTaskBtn(selection);\n//   // After moving listenerController below\n//   // Need to add task list listener\n\n\n\n//   display(dataController.currentProjects);\n//   highlight(document.getElementById(selection)); \n//   // Need to add proj list listener\n\n//   // Need to add rest of page listeners\n\n\n\n\n\n//   const toggleMenu = () => {\n//     const navPanel = document.querySelector('nav'); \n//     const menuIcon = document.querySelector('.menu-icon');\n//     const menuToggleTooltip = document.querySelector('#menu-icon-wrapper > .tooltip-text');\n\n//     navPanel.classList.toggle('hidden');\n  \n//     if (navPanel.classList.contains('hidden')) {\n//       menuToggleTooltip.textContent = 'Expand menu';\n//       menuIcon.textContent = 'menu';\n//     } else {\n//       menuToggleTooltip.textContent = 'Collapse menu';\n//       menuIcon.textContent = 'menu_open';\n//     }\n//   }\n\n//   const toggleTheme = () => {\n//     const themeIcon = document.querySelector('.theme-icon');\n//     const themeToggleTooltip = document.querySelector('#theme-icon-wrapper > .tooltip-text');\n\n//     document.body.classList.toggle('dark');\n      \n//     if (document.body.classList.contains('dark')) {\n//       themeToggleTooltip.textContent = 'Light theme'; \n//       themeIcon.textContent = 'brightness_high';\n//     } else {\n//       themeToggleTooltip.textContent = 'Dark theme'; \n//       themeIcon.textContent = 'brightness_4';\n//     }\n//   }\n\n\n//   // Excludes task edit form btns\n//   const managePageBtns = (e) => {\n//     let isProjBtn = e.currentTarget.classList.contains('project-button');\n//     let action = e.currentTarget.id;\n//     let form = isProjBtn \n//       ? document.querySelector('#projects-panel form')\n//       : document.querySelector('main > form');\n  \n//     if (action === 'add-project' || action === 'add-task') {\n//       displayTargetForm(form);\n//       hideExtraneousForms(action);\n//     }\n  \n//     if (action === 'cancel-project' || action === 'cancel-task') {\n//       hideTargetForm(form);\n//     }\n  \n//     if (action === 'submit-project' || action === 'submit-task') {\n//       // setMain or setTasksList?\n\n\n//       display(dataController.initNewItem(action));\n\n\n//       if (action === 'submit-project') {\n//         // Move highlight to own module??\n//         let elem = document.getElementById(dataController.currentNavSelection);\n//         highlight(elem);\n//         listenersController.addNavListsListeners();\n//       } else {\n//         listenersController.addTasksListListener();\n//       }\n\n//       hideTargetForm(form);\n//     }\n//   }\n\n//   const manageNavResponse = (e) => {\n//     const selection = e.target.closest('li');\n//     const addTaskBtn = document.querySelector('main > button');\n//     const mainPanel = document.querySelector('main');\n\n//     // If a home option/proj clicked\n//     if (selection) { \n//       // If click is on a delete icon\n//       if (e.target.classList.contains('delete-icon')) {        \n//         // Remove item, redisplay + add listener to container list\n//         display(dataController.deleteItem(selection.id, dataController.currentProjects))\n//         listenersController.addNavListsListeners();\n\n//         // If deleted item was displayed in main, display 'All' tasks\n//         if (selection.id === mainPanel.dataset.selected) {\n\n//           dataController.currentNavSelection = 'all';\n//           dataController.populateLocalStorage(dataController.currentNavSelection);\n\n//           let selection = dataController.currentNavSelection;\n//           setMainHeader(selection);\n//           // Set dataset here \n//           display(dataController.filterTasks(selection));\n//           addTaskBtn.classList.add('hidden');\n//           // Add task listener here\n//         } \n\n//         highlight(document.getElementById(dataController.currentNavSelection)); \n\n//       } else {\n\n//         dataController.currentNavSelection = selection.id;\n//         dataController.populateLocalStorage(selection.id);\n\n//         // SetMain\n//         mainPanel.dataset.selected = selection.id;\n//         (e.target.closest('ul').id === 'home-list') ? addTaskBtn.classList.add('hidden') : addTaskBtn.classList.remove('hidden');\n//         setMainHeader(selection.id);\n//         display(dataController.filterTasks(selection.id));\n//         listenersController.addTasksListListener();  \n\n//         // Move highlight to own module??\n//         highlight(selection);\n//       }\n//     }\n//   }\n\n//   const manageTaskResponse = (e) => {\n//     let selection = e.target.closest('li');\n//     let mainPanel = document.querySelector('main');\n//     // Move to below; cancel/submit edit\n//     let editForm = document.querySelector('#edit-task-form');\n//     // ^^^^^^^^^\n//     let currentProjects = dataController.currentProjects;\n//     let wrapper, description, checkbox;\n\n  \n//     if (selection) {\n//       wrapper = selection.querySelector('.task-wrapper');\n//       description = selection.querySelector('.task-descr-wrapper');\n//       checkbox = selection.querySelector('.checkbox');\n//     }\n  \n//     for (let i = 0; i < currentProjects.length; i++) {\n//       for (let j = 0; j < currentProjects[i].tasks.length; j++) {\n\n//         if (currentProjects[i].tasks[j].id === selection.id) {\n//           let task = currentProjects[i].tasks[j];\n  \n//           if (e.target.classList.contains('checkbox') || e.target.classList.contains('checked')) {\n  \n//             (task.completed) ? task.completed = false : task.completed = true;\n//             dataController.populateLocalStorage(currentProjects);\n\n//             checkbox.classList.toggle('checked');\n//             selection.classList.toggle('completed');\n//             description.classList.toggle('crossed');\n  \n//           }  \n          \n//           if (e.target.classList.contains('important-icon')) {\n  \n//             (task.important) ? task.important = false : task.important = true; \n//             dataController.populateLocalStorage(currentProjects);\n  \n//             e.target.classList.toggle('important');\n  \n//           } \n          \n//           if (e.target.classList.contains('edit-icon')) {\n//             hideExtraneousForms();\n\n//             selection.append(content.createEditForm(task));\n//             wrapper.classList.toggle('hidden');\n  \n//           } \n          \n//           if (e.target.classList.contains('delete-icon')) {\n//             dataController.currentProjects[i].tasks.splice(j, 1);\n//             dataController.populateLocalStorage(dataController.currentProjects);\n\n//             // let container = dataController.currentProjects[i].tasks\n//             // let itemToDelete = task.id\n//             // deleteItem(itemToDelete, container) unnecessary?????\n//             // display(deleteItem(itemToDelete, container)) works?????\n//             // AddListener\n//             // or just...\n//             // setTasksList()\n\n//             display(dataController.filterTasks(mainPanel.dataset.selected))\n//             listenersController.addTasksListListener();\n//           }\n  \n\n//           if (e.target.id === 'cancel-edit') {\n//             editForm.previousElementSibling.classList.toggle('hidden');\n//             editForm.remove();\n  \n//           } else if (e.target.id === 'submit-edit') {\n//             task.name = document.querySelector('#edit-name-input').value;\n//             task.details = document.querySelector('#edit-details-input').value;\n//             task.due = document.querySelector('#edit-date-input').value;\n//             task.important = document.querySelector('#edit-important-input').checked;\n    \n//             dataController.populateLocalStorage(dataController.currentProjects);\n\n\n//             display(dataController.filterTasks(mainPanel.dataset.selected))\n//             listenersController.addTasksListListener();\n//           }\n  \n//         }\n//       }\n//     }\n//   }\n\n\n//   /* Helper functions: */\n//   // Create item and add to appropriate list\n//   function display (data) {\n//     let oldList, listId, container;\n//     let isProj = (data === dataController.currentProjects);\n  \n//     if (isProj) {\n//       container = document.querySelector('#projects-list-container');\n//       oldList = document.querySelector('#projects-list');\n//       listId = 'projects-list';\n//     } else {\n//       container = document.querySelector('#tasks-list-container');\n//       oldList = document.querySelector('#tasks-list');\n//       listId = 'tasks-list';\n//     }\n  \n//     if (container.contains(oldList)) {\n//       oldList.remove();\n//     }\n  \n//     const newList = document.createElement('ul');\n//     newList.id = listId;\n//     data.forEach(item => { \n//       newList.append(\n//         isProj ? content.createProject(item) : content.createTask(item)\n//       );\n//     })\n  \n//     container.append(newList);\n//   }\n  \n//   // Set main h1 text \n//   function setMainHeader(input) {\n//     const mainHeader = document.querySelector('h1');\n\n//     switch (input) {\n//     case 'all':\n//       mainHeader.textContent = 'All Tasks';\n//       break;\n//     case 'today':\n//       mainHeader.textContent = 'Today';\n//       break;\n//     case 'week':\n//       mainHeader.textContent = 'Next 7 Days';\n//       break;\n//     case 'important':\n//       mainHeader.textContent = 'Important';\n//       break;\n//     default:\n//       dataController.currentProjects.forEach(proj => {\n//         if (proj.id === input) {\n//           mainHeader.textContent = proj.name ? proj.name : 'No name entered';\n//         }\n//       })\n//     }\n//   }\n\n//   // Show correct form (either proj or task)\n//   function displayTargetForm(form) {\n//     // Show selected form\n//     form.classList.remove('hidden');\n//     // Focus on first input box\n//     form.querySelector('input').focus();\n//     // Hide add button\n//     form.nextElementSibling.classList.add('hidden');\n\n//     window.addEventListener('click', hideFormOnClick);\n\n//   }\n\n//   function hideFormOnClick(e) {\n\n//     let isTaskBtn = \n//       e.target.classList.contains('task-button') || \n//       e.target.parentElement.classList.contains('task-button');\n//     let isProjBtn = \n//       e.target.classList.contains('project-button') || \n//       e.target.parentElement.classList.contains('project-button');\n//     let isForm = !!e.target.closest('form');\n//     let displayedForm;\n\n//     let pgForms = document.querySelectorAll('form');\n//     pgForms.forEach(form => {\n//       if (!form.classList.contains('hidden')) {\n//         displayedForm = form;\n//       }\n//     })\n\n//     if (!isTaskBtn && !isProjBtn && !isForm) {\n//       hideTargetForm(displayedForm);\n//     }\n//   }\n\n//   // Hide input form\n//   function hideTargetForm(form) {\n//     // Reset form\n//     form.reset();\n//     // Hide selected form\n//     form.classList.add('hidden');\n//     // Show add button\n//     form.nextElementSibling.classList.remove('hidden');\n\n\n//     window.removeEventListener('click', hideFormOnClick);\n//   }\n\n//   // Hide/remove irrelevant forms \n//   function hideExtraneousForms(action) {\n//     const tasksListContainer = document.querySelector('#tasks-list-container');\n//     let editFormDisplayed = !!tasksListContainer.querySelector('form')\n//     let irrelForm;\n\n//     if (action === 'add-project') {\n//       // Task submission form\n//       irrelForm = document.querySelector('main > form');\n//     } else if (action === 'add-task') {\n//       // Proj submission form\n//       irrelForm = document.querySelector(\"#projects-panel form\");\n//     } else { // action === 'show edit form'\n//       // If create task/proj form not hidden, set = irrelForm\n//       let pgForms = document.querySelectorAll('#projects-panel > form, main > form');\n//       pgForms.forEach(form => {\n//         if (!form.classList.contains('hidden')) {\n//           irrelForm = form;\n\n//         }\n//       })\n\n//     }\n  \n//     if (irrelForm) {\n//       // If create task/proj form displayed, hide\n//       if (!irrelForm.classList.contains('hidden')) {\n//         irrelForm.classList.toggle('hidden');\n//         irrelForm.nextElementSibling.classList.toggle('hidden');\n//         window.removeEventListener('click', hideFormOnClick);\n//       }\n//     }\n  \n//     // If edit task form displayed, hide\n//     if (editFormDisplayed) {\n//       let editForm = tasksListContainer.querySelector('form');\n  \n//       editForm.previousElementSibling.classList.toggle('hidden');\n//       editForm.remove();\n//     }\n//   }\n\n\n//   return {\n//     toggleMenu, \n//     toggleTheme,\n//     managePageBtns,\n//     manageNavResponse,\n//     manageTaskResponse\n//   }\n// })();\n\n// const listenersController = (() => {\n\n//   const addMenuToggListener = () => {\n//     const menuToggle = document.querySelector('.menu-icon');\n\n//     menuToggle.addEventListener('click', displayController.toggleMenu);\n//   }\n\n//   const addThemeToggListener = () => {\n//     const themeToggle = document.querySelector('.theme-icon');\n\n//     themeToggle.addEventListener('click', displayController.toggleTheme);\n//   }\n\n//   const addNavListsListeners = () => {\n//     // In lieu of adding listener to list items, add to lists\n//     // May be more efficient?\n//     let navLists = document.querySelectorAll('nav ul');\n\n//     navLists.forEach(list => {\n//       list.addEventListener('click', displayController.manageNavResponse)\n//     })\n//   }\n\n//   const addTasksListListener = () => {\n//   const tasksList = document.querySelector('#tasks-list');\n\n//     if (tasksList) {\n//       tasksList.addEventListener('click', displayController.manageTaskResponse)\n//     }\n//   }\n\n//   const addPageBtnListeners = () => {\n//     const formBtns = document.querySelectorAll('button');\n  \n//     formBtns.forEach(btn => {\n//       btn.addEventListener('click', displayController.managePageBtns);\n//     })\n//   }\n\n\n\n\n//   // addMenuToggListener();\n//   addThemeToggListener();\n//   // Only on task views on start\n//   addNavListsListeners(); \n//   addTasksListListener();\n//   addPageBtnListeners();\n\n//   return {\n//     addMenuToggListener,\n//     addThemeToggListener,\n//     addNavListsListeners,\n//     addTasksListListener,\n//     addPageBtnListeners\n//   }\n// })();\n\n\n\n//# sourceURL=webpack://todo-list/./src/index.js?");

/***/ }),

/***/ "./src/modules/content-fns.js":
/*!************************************!*\
  !*** ./src/modules/content-fns.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createEditForm\": () => (/* binding */ createEditForm),\n/* harmony export */   \"createProj\": () => (/* binding */ createProj),\n/* harmony export */   \"createTask\": () => (/* binding */ createTask)\n/* harmony export */ });\n// This module contains functions that create the dynamic page content \n\nconst createProj = (obj) => {\n  const projectListItem = document.createElement('li');\n  const projectWrapper = document.createElement('div');\n  const projectIcon = document.createElement('span');\n  const projectTitle = document.createElement('h3');\n  const deleteIcon = document.createElement('span');\n  \n  projectListItem.classList.add('project-item');\n  projectListItem.id = obj.id;\n  projectWrapper.classList.add('project-wrapper');\n  projectIcon.classList.add('material-symbols-rounded', 'decor-icon');\n  projectIcon.textContent = 'tools_power_drill';\n  projectTitle.textContent = obj.name ? obj.name : 'No name entered';\n  deleteIcon.classList.add('material-symbols-rounded', 'delete-icon');\n  deleteIcon.textContent = 'delete';\n\n  projectWrapper.append(projectIcon, projectTitle, deleteIcon);\n  projectListItem.append(projectWrapper);\n  return projectListItem;\n};\n\nconst createTask = (obj) => {\n  const taskListItem = document.createElement('li');\n  const taskWrapper = document.createElement('div');\n  const taskSubWrapper = document.createElement('div');\n  const checkbox = document.createElement('div');\n  const taskDescrWrapper = document.createElement('div');\n  const taskName = document.createElement('h3');\n  const taskDetails = document.createElement('p');  \n  const taskEditWrapper = document.createElement('div');\n  const taskDueDate = document.createElement('span');\n  const taskImportantIcon = document.createElement('span');\n  const editIcon = document.createElement('span');\n\n  taskListItem.classList.add('task-item');\n  taskListItem.id = obj.id;\n  taskWrapper.classList.add('task-wrapper');\n  taskSubWrapper.classList.add('task-sub-wrapper');\n  checkbox.classList.add('checkbox');\n  taskDescrWrapper.classList.add('task-descr-wrapper');\n  taskName.textContent = obj.name ? obj.name : 'No name entered';\n  taskDetails.textContent = obj.details;\n  taskEditWrapper.classList.add('task-edit-wrapper');\n  taskDueDate.classList.add('task-due-date');\n  taskImportantIcon.classList.add('material-symbols-rounded', 'important-icon');\n  taskImportantIcon.textContent = 'flag';\n  editIcon.classList.add('material-symbols-rounded', 'edit-icon');\n  editIcon.textContent = 'more_vert';\n  \n  if (obj.completed) {\n    checkbox.classList.add('checked');\n    taskListItem.classList.add('completed');\n    taskDescrWrapper.classList.add('crossed');\n  }\n  if (obj.due) {\n    taskDueDate.textContent = taskObj.due;\n  } else {\n    taskDueDate.textContent = 'No due date';\n  }\n  if (obj.important) {\n    taskImportantIcon.classList.add('important');\n  }\n\n  taskEditWrapper.append(taskDueDate, taskImportantIcon, editIcon);\n  taskDescrWrapper.append(taskName, taskDetails);\n  taskSubWrapper.append(checkbox, taskDescrWrapper);\n  taskWrapper.append(taskSubWrapper, taskEditWrapper);\n  taskListItem.append(taskWrapper);\n  return taskListItem;\n}\n\nconst createEditForm = (obj) => {\n  const form = document.createElement(\"form\");\n  const nameLabel = document.createElement(\"label\");\n  const nameInput = document.createElement(\"input\");\n  const detailsLabel = document.createElement(\"label\");\n  const detailsInput = document.createElement(\"textarea\");\n  const dateLabel = document.createElement(\"label\");\n  const dateInput = document.createElement(\"input\");\n  const formSubContainer = document.createElement('div');\n  const importantLabel = document.createElement(\"label\");\n  const importantInput = document.createElement(\"input\");\n  const deleteWrapper = document.createElement('div');\n  const deleteIcon = document.createElement('span');\n  const btnContainer = document.createElement(\"div\");\n  const submitBtn = document.createElement(\"button\");\n  const cancelBtn = document.createElement(\"button\");\n\n  form.id = 'edit-task-form';\n  nameLabel.htmlFor = \"edit-name-input\";\n  nameLabel.textContent = \"Task name:\";\n  nameInput.id = \"edit-name-input\";\n  nameInput.type = \"text\";\n  nameInput.placeholder = \"E.g., Get dinner\";\n  detailsLabel.htmlFor = \"edit-details-input\";\n  detailsLabel.textContent = \"Details:\";\n  detailsInput.id = \"edit-details-input\";\n  detailsInput.rows = \"5\";\n  detailsInput.cols = \"30\";\n  detailsInput.wrap = \"hard\";\n  detailsInput.placeholder = \"E.g., Taco Bell\";\n  dateLabel.htmlFor = \"edit-date-input\";\n  dateLabel.textContent = \"Date due:\";\n  dateInput.id = \"edit-date-input\";\n  dateInput.type = \"Date\";\n  importantLabel.htmlFor = \"edit-important-input\";\n  importantLabel.textContent = \"Important:\";\n  importantInput.id = \"edit-important-input\";\n  importantInput.type = \"checkbox\";\n  deleteWrapper.textContent = 'Delete:';\n  deleteWrapper.classList.add('delete-wrapper');\n  deleteIcon.classList.add('material-symbols-rounded', 'delete-icon');\n  deleteIcon.textContent = 'delete';\n  submitBtn.classList.add(\"edit-button\");\n  submitBtn.id = \"submit-edit\";\n  submitBtn.textContent = \"Submit\";\n  submitBtn.type = \"button\";\n  cancelBtn.classList.add(\"edit-button\");\n  cancelBtn.id = \"cancel-edit\";\n  cancelBtn.textContent = \"Cancel\";\n  cancelBtn.type = \"button\";\n\n  nameInput.value = obj.name;\n  detailsInput.value = obj.details;\n  dateInput.value = obj.due;\n  importantInput.checked = obj.important;\n\n  importantLabel.append(importantInput);\n  deleteWrapper.append(deleteIcon);\n  formSubContainer.append(importantLabel, deleteWrapper);\n  btnContainer.append(submitBtn, cancelBtn);\n  form.append(\n    nameLabel,\n    nameInput,\n    detailsLabel,\n    detailsInput,\n    dateLabel,\n    dateInput,\n    formSubContainer,\n    btnContainer\n  );\n  return form;\n};\n\n\n\n//# sourceURL=webpack://todo-list/./src/modules/content-fns.js?");

/***/ }),

/***/ "./src/modules/data-fns":
/*!******************************!*\
  !*** ./src/modules/data-fns ***!
  \******************************/
/***/ (() => {

eval("throw new Error(\"Module parse failed: Export 'toggleProp' is not defined (162:2)\\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\\n|   filterTasks,\\n|   popLocalStorage,\\n>   toggleProp,\\n|   setNavSelection\\n| }\");\n\n//# sourceURL=webpack://todo-list/./src/modules/data-fns?");

/***/ }),

/***/ "./src/modules/data.js":
/*!*****************************!*\
  !*** ./src/modules/data.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* This module acts as the database for the application */\n\n// Wrap in IIFE to be able to reassign the variables\n// Without it, get a no setter error \nconst data = (() => {\n  // Defines user current projects\n  let projects = !JSON.parse(localStorage.getItem('projects')) \n    ? [] \n    : JSON.parse(localStorage.getItem('projects'));\n\n  // Defines nav panel selection displayed in main panel\n  let navSelection = !localStorage.getItem('display')\n    ? 'all' \n    : localStorage.getItem('display'); \n\n  return {\n    projects,\n    navSelection\n  }\n})();\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (data);\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://todo-list/./src/modules/data.js?");

/***/ }),

/***/ "./src/modules/display-fns.js":
/*!************************************!*\
  !*** ./src/modules/display-fns.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"hlNavSelection\": () => (/* binding */ hlNavSelection),\n/* harmony export */   \"manageNavResponse\": () => (/* binding */ manageNavResponse),\n/* harmony export */   \"managePageBtns\": () => (/* binding */ managePageBtns),\n/* harmony export */   \"manageTaskResponse\": () => (/* binding */ manageTaskResponse),\n/* harmony export */   \"setMainPanel\": () => (/* binding */ setMainPanel),\n/* harmony export */   \"setProjPanel\": () => (/* binding */ setProjPanel),\n/* harmony export */   \"toggleMenu\": () => (/* binding */ toggleMenu),\n/* harmony export */   \"toggleTheme\": () => (/* binding */ toggleTheme)\n/* harmony export */ });\n/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./data.js */ \"./src/modules/data.js\");\n/* harmony import */ var _content_fns_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./content-fns.js */ \"./src/modules/content-fns.js\");\n/* harmony import */ var _listener_fns__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./listener-fns */ \"./src/modules/listener-fns.js\");\n/* harmony import */ var _data_fns__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./data-fns */ \"./src/modules/data-fns\");\n\n\n\n\n\n\n\n\nconst setTasksList = (arr) => {\n  display(arr);\n  _listener_fns__WEBPACK_IMPORTED_MODULE_2__.addTasksListListener('click', manageTaskResponse);\n}\nfunction displayTargetForm(form) {\n  // Show selected form\n  form.classList.remove('hidden');\n  // Focus on first input box\n  form.querySelector('input').focus();\n  // Hide add button\n  form.nextElementSibling.classList.add('hidden');\n\n  // window.addEventListener('click', hideFormOnClick);\n  _listener_fns__WEBPACK_IMPORTED_MODULE_2__.docListener('add', 'click', hideFormOnClick);\n}\nfunction hideFormOnClick(e) {\n  let isTaskBtn =\n    e.target.classList.contains('task-button') ||\n    e.target.parentElement.classList.contains('task-button');\n  let isProjBtn =\n    e.target.classList.contains('project-button') ||\n    e.target.parentElement.classList.contains('project-button');\n  let isForm = !!e.target.closest('form');\n  let displayedForm;\n\n  let pgForms = document.querySelectorAll('form');\n  pgForms.forEach(form => {\n    if (!form.classList.contains('hidden')) {\n      displayedForm = form;\n    }\n  })\n\n  if (!isTaskBtn && !isProjBtn && !isForm) {\n    hideTargetForm(displayedForm);\n  }\n}\nfunction hideTargetForm(form) {\n  // Reset form\n  form.reset();\n  // Hide selected form\n  form.classList.add('hidden');\n  // Show add button\n  form.nextElementSibling.classList.remove('hidden');\n\n  // window.removeEventListener('click', hideFormOnClick);\n  _listener_fns__WEBPACK_IMPORTED_MODULE_2__.docListener('remove', 'click', hideFormOnClick);\n}\nfunction hideExtraneousForms(action) {\n  const tasksListContainer = document.querySelector('#tasks-list-container');\n  let editFormDisplayed = !!tasksListContainer.querySelector('form')\n  let irrelForm;\n\n  if (action === 'add-project') {\n    // Task submission form\n    irrelForm = document.querySelector('main > form');\n  } else if (action === 'add-task') {\n    // Proj submission form\n    irrelForm = document.querySelector(\"#projects-panel form\");\n  } else { // action === 'show edit form'\n    // If create task/proj form not hidden, set = irrelForm\n    let pgForms = document.querySelectorAll('#projects-panel > form, main > form');\n    pgForms.forEach(form => {\n      if (!form.classList.contains('hidden')) {\n        irrelForm = form;\n      }\n    })\n  }\n\n  if (irrelForm) {\n    // If create task/proj form displayed, hide\n    if (!irrelForm.classList.contains('hidden')) {\n      irrelForm.classList.toggle('hidden');\n      irrelForm.nextElementSibling.classList.toggle('hidden');\n      // window.removeEventListener('click', hideFormOnClick);\n      _listener_fns__WEBPACK_IMPORTED_MODULE_2__.docListener('remove', 'click', hideFormOnClick);\n    }\n  }\n\n  // If edit task form displayed, hide\n  if (editFormDisplayed) {\n    let editForm = tasksListContainer.querySelector('form');\n\n    editForm.previousElementSibling.classList.toggle('hidden');\n    editForm.remove();\n  }\n}\nfunction display(arr) {\n  let oldList, listId, container;\n  let isProj = (arr === _data_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].projects);\n\n  if (isProj) {\n    container = document.querySelector('#projects-list-container');\n    oldList = document.querySelector('#projects-list');\n    listId = 'projects-list';\n  } else {\n    container = document.querySelector('#tasks-list-container');\n    oldList = document.querySelector('#tasks-list');\n    listId = 'tasks-list';\n  }\n\n  if (container.contains(oldList)) {\n    oldList.remove();\n  }\n\n  const newList = document.createElement('ul');\n  newList.id = listId;\n  arr.forEach(item => {\n    newList.append(\n      isProj ? _content_fns_js__WEBPACK_IMPORTED_MODULE_1__.createProj(item) : _content_fns_js__WEBPACK_IMPORTED_MODULE_1__.createTask(item)\n    );\n  })\n  container.append(newList);\n  \n  return isProj;\n}\n\n\n\n\nconst setMainPanel = () => {\n  const mainPanel = document.querySelector('main');\n  const mainHeader = document.querySelector('h1');\n  const addTaskBtn = document.querySelector('main > button');\n  let input = _data_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].navSelection\n\n  // Set selected data on main\n  mainPanel.dataset.selected = input;\n\n  // Set header\n  switch (input) {\n    case 'all':\n      mainHeader.textContent = 'All Tasks';\n      break;\n    case 'today':\n      mainHeader.textContent = 'Today';\n      break;\n    case 'week':\n      mainHeader.textContent = 'Next 7 Days';\n      break;\n    case 'important':\n      mainHeader.textContent = 'Important';\n      break;\n    default:\n      _data_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].projects.forEach(proj => {\n        if (proj.id === input) {\n          mainHeader.textContent = proj.name ? proj.name : 'No name entered';\n        }\n      })\n  }\n\n  // Control add task btn\n  switch (input) {\n    case 'all':\n    case 'today':\n    case 'week':\n    case 'important':\n      addTaskBtn.classList.add('hidden');\n      break;\n    default:\n      addTaskBtn.classList.remove('hidden');\n  }\n\n  setTasksList(_data_fns__WEBPACK_IMPORTED_MODULE_3__.filterTasks(input));\n\n  // Filter tasks by input, display, add tasks listener\n  // setTasksList(dataFns.filterTasks(input));\n  // display(dataFns.filterTasks(input));\n  // listenerFns.addTasksListListener('click', manageTaskResponse);\n}\n\nconst setProjPanel = (arr) => {\n  display(arr);\n  _listener_fns__WEBPACK_IMPORTED_MODULE_2__.addNavListListeners('click', manageNavResponse);\n}\n\nconst hlNavSelection = () => {\n  const navItems = document.querySelectorAll('nav li');\n  navItems.forEach(item => {\n    if (item.classList.contains('highlight') && item.id !== _data_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].navSelection) {\n      item.classList.remove('highlight');\n    }\n  });\n\n  document.getElementById(_data_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].navSelection).classList.add('highlight');\n}\n\nconst toggleMenu = () => {\n  const navPanel = document.querySelector('nav');\n  const menuIcon = document.querySelector('.menu-icon');\n  const menuToggleTooltip = document.querySelector('#menu-icon-wrapper > .tooltip-text');\n\n  navPanel.classList.toggle('hidden');\n\n  if (navPanel.classList.contains('hidden')) {\n    menuToggleTooltip.textContent = 'Expand menu';\n    menuIcon.textContent = 'menu';\n  } else {\n    menuToggleTooltip.textContent = 'Collapse menu';\n    menuIcon.textContent = 'menu_open';\n  }\n}\n\nconst toggleTheme = () => {\n  const themeIcon = document.querySelector('.theme-icon');\n  const themeToggleTooltip = document.querySelector('#theme-icon-wrapper > .tooltip-text');\n\n  document.body.classList.toggle('dark');\n\n  if (document.body.classList.contains('dark')) {\n    themeToggleTooltip.textContent = 'Light theme';\n    themeIcon.textContent = 'brightness_high';\n  } else {\n    themeToggleTooltip.textContent = 'Dark theme';\n    themeIcon.textContent = 'brightness_4';\n  }\n}\n\nconst managePageBtns = (e) => {\n  let isProjBtn = e.currentTarget.classList.contains('project-button');\n  let action = e.currentTarget.id;\n  let form = isProjBtn\n    ? document.querySelector('#projects-panel form')\n    : document.querySelector('main > form');\n\n  if (action === 'add-project' || action === 'add-task') {\n    displayTargetForm(form);\n    hideExtraneousForms(action);\n  } else {\n\n    if (action === 'submit-project') {\n      setProjPanel(_data_fns__WEBPACK_IMPORTED_MODULE_3__.initNewItem(action));\n      hlNavSelection();\n    } else if (action === 'submit-task') {\n      setTasksList(_data_fns__WEBPACK_IMPORTED_MODULE_3__.initNewItem(action));\n    }\n\n    hideTargetForm(form);\n  }\n}\n\nconst manageNavResponse = (e) => {\n  const selection = e.target.closest('li');\n  const mainPanel = document.querySelector('main');\n\n  if (selection) {\n    if (e.target.classList.contains('delete-icon')) {\n      setProjPanel(_data_fns__WEBPACK_IMPORTED_MODULE_3__.deleteItem(selection.id, _data_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].projects));\n\n      if (selection.id === mainPanel.dataset.selected) {\n        _data_fns__WEBPACK_IMPORTED_MODULE_3__.setNavSelection('all');\n        setMainPanel();\n      }\n\n      hlNavSelection();\n    } else {\n      _data_fns__WEBPACK_IMPORTED_MODULE_3__.setNavSelection(selection.id);\n      setMainPanel();\n      hlNavSelection();\n    }\n  }\n}\n\nconst manageTaskResponse = (e) => {\n  let selection = e.target.closest('li');\n  let mainPanel = document.querySelector('main');\n  let editForm = document.querySelector('#edit-task-form');\n  let projects = _data_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].projects;\n  let wrapper, description, checkbox;\n\n  if (selection) {\n    wrapper = selection.querySelector('.task-wrapper');\n    description = selection.querySelector('.task-descr-wrapper');\n    checkbox = selection.querySelector('.checkbox');\n  }\n\n  projects.forEach(proj => {\n    proj.tasks.forEach(task => {\n      if (task.id === selection.id) {\n        if (\n          e.target.classList.contains('checkbox') || \n          e.target.classList.contains('checked')\n        ) {\n          task.completed ? (task.completed = false) : (task.completed = true);\n          _data_fns__WEBPACK_IMPORTED_MODULE_3__.popLocalStorage(projects);\n\n          checkbox.classList.toggle('checked');\n          selection.classList.toggle('completed');\n          description.classList.toggle('crossed');\n        }\n\n        if (e.target.classList.contains('important-icon')) {\n          task.important ? (task.important = false) : (task.important = true);\n          _data_fns__WEBPACK_IMPORTED_MODULE_3__.popLocalStorage(projects);\n\n          e.target.classList.toggle('important');\n        }\n\n        if (e.target.classList.contains('edit-icon')) {\n          hideExtraneousForms();\n          selection.append(_content_fns_js__WEBPACK_IMPORTED_MODULE_1__.createEditForm(task));\n          wrapper.classList.toggle('hidden');\n        }\n\n        if (e.target.classList.contains('delete-icon')) {\n          setTasksList(_data_fns__WEBPACK_IMPORTED_MODULE_3__.deleteItem(task.id, proj.tasks))\n        }\n\n\n        if (e.target.id === 'cancel-edit') {\n          editForm.previousElementSibling.classList.toggle('hidden');\n          editForm.remove();\n        } else if (e.target.id === 'submit-edit') {\n          task.name = document.querySelector('#edit-name-input').value;\n          task.details = document.querySelector('#edit-details-input').value;\n          task.due = document.querySelector('#edit-date-input').value;\n          task.important = document.querySelector('#edit-important-input').checked;\n          _data_fns__WEBPACK_IMPORTED_MODULE_3__.popLocalStorage(projects);\n\n          setTasksList(_data_fns__WEBPACK_IMPORTED_MODULE_3__.filterTasks(mainPanel.dataset.selected));\n        }\n      }\n    })\n  })\n}\n\n\n\n\n// const managePageBtns = (e) => {\n//   let isProjBtn = e.currentTarget.classList.contains('project-button');\n//   let action = e.currentTarget.id;\n//   let form = isProjBtn\n//     ? document.querySelector('#projects-panel form')\n//     : document.querySelector('main > form');\n\n//   if (action === 'add-project' || action === 'add-task') {\n//     displayTargetForm(form);\n//     hideExtraneousForms(action);\n//   }\n\n//   if (action === 'cancel-project' || action === 'cancel-task') {\n//     hideTargetForm(form);\n//   }\n\n//   if (action === 'submit-project' || action === 'submit-task') {\n//     // setMain or setTasksList?\n\n\n//     display(data.initNewItem(action));\n\n\n//     if (action === 'submit-project') {\n//       highlight(data.navSelection);\n//       listenersController.addNavListsListeners();\n\n//     } else {\n//       listenersController.addTasksListListener();\n//     }\n\n//     hideTargetForm(form);\n//   }\n// }\n\n// const manageNavResponse = (e) => {\n//   const selection = e.target.closest('li');\n//   const mainPanel = document.querySelector('main');\n\n//   // If a home option/proj clicked\n//   if (selection) {\n//     // If click is on a delete icon\n//     if (e.target.classList.contains('delete-icon')) {\n\n//       display(dataFns.deleteItem(selection.id, data.projects))\n//       listenerFns.addNavListListeners('click', manageNavResponse);\n\n//       // If deleted item was displayed in main, display 'All' tasks\n//       if (selection.id === mainPanel.dataset.selected) {\n\n//         data.navSelection = 'all';\n//         dataFns.popLocalStorage(data.navSelection);\n\n//         setMainPanel(data.navSelection);\n\n//         // display(data.filterTasks(selection));\n//         // Add task listener here\n//       }\n\n//       highlight(data.navSelection);\n\n//     } else {\n\n//       data.navSelection = selection.id;\n//       dataFns.popLocalStorage(data.navSelection);\n\n//       setMainPanel(selection.id);\n\n//       // display(dataFns.filterTasks(selection.id));\n//       // listenerFns.addTasksListListener('click', manageTaskResponse);\n\n//       // Move highlight to own module??\n//       highlight(selection.id);\n//     }\n//   }\n// }\n\n// const manageTaskResponse = (e) => {\n//   let selection = e.target.closest('li');\n//   let mainPanel = document.querySelector('main');\n//   let currentProjects = data.projects;\n//   let wrapper, description, checkbox;\n\n//   // Move to below; cancel/submit edit\n//   let editForm = document.querySelector('#edit-task-form');\n\n\n\n//   if (selection) {\n//     wrapper = selection.querySelector('.task-wrapper');\n//     description = selection.querySelector('.task-descr-wrapper');\n//     checkbox = selection.querySelector('.checkbox');\n//   }\n\n//   for (let i = 0; i < currentProjects.length; i++) {\n//     for (let j = 0; j < currentProjects[i].tasks.length; j++) {\n\n//       if (currentProjects[i].tasks[j].id === selection.id) {\n//         let task = currentProjects[i].tasks[j];\n\n//         if (e.target.classList.contains('checkbox') || e.target.classList.contains('checked')) {\n\n//           (task.completed) ? task.completed = false : task.completed = true;\n//           data.popLocalStorage(currentProjects);\n\n//           checkbox.classList.toggle('checked');\n//           selection.classList.toggle('completed');\n//           description.classList.toggle('crossed');\n\n//         }\n\n//         if (e.target.classList.contains('important-icon')) {\n\n//           (task.important) ? task.important = false : task.important = true;\n//           dataController.populateLocalStorage(currentProjects);\n\n//           e.target.classList.toggle('important');\n\n//         }\n\n//         if (e.target.classList.contains('edit-icon')) {\n//           hideExtraneousForms();\n\n//           selection.append(content.createEditForm(task));\n//           wrapper.classList.toggle('hidden');\n\n//         }\n\n//         if (e.target.classList.contains('delete-icon')) {\n//           data.projects[i].tasks.splice(j, 1);\n//           data.popLocalStorage(currentProjects);\n\n\n//           // let container = data.projects[i].tasks\n//           // let itemToDelete = task.id\n//           // deleteItem(itemToDelete, container) unnecessary?????\n//           // display(deleteItem(itemToDelete, container)) works?????\n//           // AddListener\n//           // or just...\n//           // setTasksList()\n\n//           display(dataFns.filterTasks(mainPanel.dataset.selected))\n//           listenerFns.addTasksListListener('click', manageTaskResponse);\n//         }\n\n\n//         if (e.target.id === 'cancel-edit') {\n//           editForm.previousElementSibling.classList.toggle('hidden');\n//           editForm.remove();\n\n//         } else if (e.target.id === 'submit-edit') {\n//           task.name = document.querySelector('#edit-name-input').value;\n//           task.details = document.querySelector('#edit-details-input').value;\n//           task.due = document.querySelector('#edit-date-input').value;\n//           task.important = document.querySelector('#edit-important-input').checked;\n\n//           data.popLocalStorage(currentProjects);\n\n\n\n//           display(data.filterTasks(mainPanel.dataset.selected))\n//           listenerFns.addTasksListListener('click', manageTaskResponse);\n//         }\n\n//       }\n//     }\n//   }\n// }\n\n// const manageTaskResponse = (e) => {\n//   let selection = e.target.closest('li');\n//   let mainPanel = document.querySelector('main');\n//   let currentProjects = data.projects;\n//   let wrapper, description, checkbox;\n\n//   // Move to below; cancel/submit edit\n//   let editForm = document.querySelector('#edit-task-form');\n\n\n\n//   if (selection) {\n//     wrapper = selection.querySelector('.task-wrapper');\n//     description = selection.querySelector('.task-descr-wrapper');\n//     checkbox = selection.querySelector('.checkbox');\n//   }\n\n//   for (let i = 0; i < currentProjects.length; i++) {\n//     for (let j = 0; j < currentProjects[i].tasks.length; j++) {\n\n//       if (currentProjects[i].tasks[j].id === selection.id) {\n//         let task = currentProjects[i].tasks[j];\n\n//         if (e.target.classList.contains('checkbox') || e.target.classList.contains('checked')) {\n\n//           (task.completed) ? task.completed = false : task.completed = true;\n//           dataFns.popLocalStorage(currentProjects);\n\n//           checkbox.classList.toggle('checked');\n//           selection.classList.toggle('completed');\n//           description.classList.toggle('crossed');\n\n//         }\n\n//         if (e.target.classList.contains('important-icon')) {\n\n//           (task.important) ? task.important = false : task.important = true;\n//           dataFns.popLocalStorage(currentProjects);\n\n//           e.target.classList.toggle('important');\n\n//         }\n\n//         if (e.target.classList.contains('edit-icon')) {\n//           hideExtraneousForms();\n\n//           selection.append(content.createEditForm(task));\n//           wrapper.classList.toggle('hidden');\n\n//         }\n\n//         if (e.target.classList.contains('delete-icon')) {\n//           data.projects[i].tasks.splice(j, 1);\n//           dataFns.popLocalStorage(currentProjects);\n\n\n//           // let container = data.projects[i].tasks\n//           // let itemToDelete = task.id\n//           // deleteItem(itemToDelete, container) unnecessary?????\n//           // display(deleteItem(itemToDelete, container)) works?????\n//           // AddListener\n//           // or just...\n//           // setTasksList()\n\n//           display(dataFns.filterTasks(mainPanel.dataset.selected))\n//           listenerFns.addTasksListListener('click', manageTaskResponse);\n//         }\n\n\n//         if (e.target.id === 'cancel-edit') {\n//           editForm.previousElementSibling.classList.toggle('hidden');\n//           editForm.remove();\n\n//         } else if (e.target.id === 'submit-edit') {\n//           task.name = document.querySelector('#edit-name-input').value;\n//           task.details = document.querySelector('#edit-details-input').value;\n//           task.due = document.querySelector('#edit-date-input').value;\n//           task.important = document.querySelector('#edit-important-input').checked;\n\n//           data.popLocalStorage(currentProjects);\n\n\n\n//           display(dataFns.filterTasks(mainPanel.dataset.selected))\n//           listenerFns.addTasksListListener('click', manageTaskResponse);\n//         }\n\n//       }\n//     }\n//   }\n// }\n\n\n//# sourceURL=webpack://todo-list/./src/modules/display-fns.js?");

/***/ }),

/***/ "./src/modules/listener-fns.js":
/*!*************************************!*\
  !*** ./src/modules/listener-fns.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"addMenuToggListener\": () => (/* binding */ addMenuToggListener),\n/* harmony export */   \"addNavListListeners\": () => (/* binding */ addNavListListeners),\n/* harmony export */   \"addPageBtnListeners\": () => (/* binding */ addPageBtnListeners),\n/* harmony export */   \"addTasksListListener\": () => (/* binding */ addTasksListListener),\n/* harmony export */   \"addThemeToggListener\": () => (/* binding */ addThemeToggListener),\n/* harmony export */   \"docListener\": () => (/* binding */ docListener)\n/* harmony export */ });\n// This module contains functions that add (or remove) listeners to key page elements\n\nconst addMenuToggListener = (evnt, fn) => {\n  const menuToggle = document.querySelector('.menu-icon');\n\n  menuToggle.addEventListener(evnt, fn);\n}\n\nconst addThemeToggListener = (evnt, fn) => {\n  const themeToggle = document.querySelector('.theme-icon');\n\n  themeToggle.addEventListener(evnt, fn);\n}\n\nconst addNavListListeners = (evnt, fn) => {\n  // In lieu of adding listener to list items, add to lists\n  // May be more efficient?\n  let navLists = document.querySelectorAll('nav ul');\n\n  navLists.forEach((list) => {\n    list.addEventListener(evnt, fn);\n  });\n}\n\nconst addTasksListListener = (evnt, fn) => {\nconst tasksList = document.querySelector('#tasks-list');\n\n  if (tasksList) {\n    tasksList.addEventListener(evnt, fn);\n  }\n}\n\nconst addPageBtnListeners = (evnt, fn) => {\n  const formBtns = document.querySelectorAll('button');\n\n  formBtns.forEach(btn => {\n    btn.addEventListener(evnt, fn);\n  });\n}\n\nconst docListener = (action, evnt, fn) => {\n  action === 'add' \n    ? document.body.addEventListener(evnt, fn) \n    : document.body.removeEventListener(evnt, fn);\n}\n\n\n\n\n\n//# sourceURL=webpack://todo-list/./src/modules/listener-fns.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;