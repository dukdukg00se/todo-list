/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("// Varaiables. Move later\nconst projectForm = document.querySelector(\"#projects-panel form\");\nconst projectTextInput = document.querySelector(\"#project-name-input\");\nconst addProjectButton = document.querySelector(\"#add-project\");\nconst projectsPanel = document.querySelector('#projects-panel');\n\nconst mainPanel = document.querySelector('main');\nconst mainHeader = document.querySelector('h1');\nconst mainForm = document.querySelector('main > form');\n\n// Data stuff\nlet currentProjects = !localStorage.length\n  ? []\n  : JSON.parse(localStorage.getItem(\"projects\"));\n\n\nfunction Project(name) {\n  this.name = name\n  this.tasks = [];\n}\nfunction Task(name, details, date) {\n  this.name = name;\n  this.details = details;\n  this.date = date;\n}\n\n\nconst addItem = (itemObj, container) => {\n  container.push(itemObj);\n}\nconst removeItem = (itemId, container) => {\n  for (let i = 0; i < container.length; i++) {\n    if (container[i].id === itemId) {\n      container.splice(i, 1);\n    }\n  }\n}\nconst setItemId = (e, container) => {\n  for (let i = 0; i < container.length; i++) {\n    e.target.parentElement.id === 'submit-project'\n      ? (container[i].id = 'project-' + i)\n      : (container[i].id = 'task-' + i);\n  }\n}\n\n\nconst updateCurrentProjects = (e) => {\n  if (e.target.classList.contains('delete')) {\n    let projectToDelete = e.target.parentElement.id;\n    removeItem(projectToDelete, currentProjects);\n  } else {\n    let projectName = projectTextInput.value;\n    addItem(new Project(projectName), currentProjects);\n  }\n  \n  setItemId(e, currentProjects);\n  populateLocalStorage(currentProjects);\n}\n\n\nconst populateLocalStorage = (projects) => {\n  localStorage.setItem('projects', JSON.stringify(projects));\n};\n\n\n\n// Display stuff\nconst showForm = () => {\n  projectForm.classList.toggle(\"hidden\");\n  projectTextInput.focus();\n  addProjectButton.classList.toggle(\"hidden\");\n};\nconst hideForm = () => {\n  projectForm.reset();\n  projectForm.classList.toggle(\"hidden\");\n  addProjectButton.classList.toggle(\"hidden\");\n};\n\nconst createProjectContent = (projectObj) => {\n  const projectListItem = document.createElement('li');\n\n  const projectContainer = document.createElement('div');\n  projectContainer.classList.add('project-container');\n  projectContainer.id = projectObj.id;\n\n  const projectTitle = document.createElement('h3');\n  projectTitle.textContent = projectObj.name\n\n  const deleteBtn = document.createElement('button');\n  deleteBtn.classList.add('delete');\n  deleteBtn.classList.add('project');\n  deleteBtn.textContent = 'X';\n  \n  deleteBtn.addEventListener('click', (e) => {\n    updateCurrentProjects(e);\n    displayProjects(currentProjects);\n    addProjectListeners();\n  })\n  \n  projectContainer.append(projectTitle, deleteBtn);\n  projectListItem.append(projectContainer);\n  return projectListItem;\n};\n\nconst createTaskContent = (obj) => {\n  const taskListItem = document.createElement('li');\n  taskListItem.classList.add('task-item');\n  const taskItemWrapper = document.createElement('div');\n  taskItemWrapper.classList.add('task-wrapper');\n  const taskInfoWrapper = document.createElement('div');\n  const taskName = document.createElement('h3');\n  const taskDetails = document.createElement('p');\n  const taskSpanWrapper = document.createElement('div');\n  const taskDate = document.createElement('span');\n  const taskUrgent = document.createElement('span');\n  const taskDeleteBtn = document.createElement('button');\n\n\n  taskName.textContent = obj.name;\n  taskDetails.textContent = obj.details;\n  taskDate.textContent = obj.due;\n  taskUrgent.textContent = obj.urgent;\n  taskDeleteBtn.textContent = 'X';\n  taskDeleteBtn.addEventListener('click', (e) => {\n    console.log(e.target);\n  })\n\n\n  taskSpanWrapper.append(taskDate, taskUrgent);\n  taskInfoWrapper.append(taskName, taskDetails);\n  taskItemWrapper.append(taskInfoWrapper, taskSpanWrapper, taskDeleteBtn);\n  taskListItem.append(taskItemWrapper);\n  \n  return taskListItem;\n}\n\nconst displayProjects = (projects) => {\n  // let activeProjects = JSON.parse(localStorage.getItem('projects'));\n\n  if (projects) {\n    const oldProjectsList = document.querySelector('#projects-list');\n    if (projectsPanel.contains(oldProjectsList)) {\n      oldProjectsList.remove();\n    }\n\n    const currentProjects = document.createElement('ul');\n    currentProjects.id = 'projects-list';\n    projects.forEach(proj => {\n      currentProjects.append(createProjectContent(proj));\n    })\n    projectsPanel.insertBefore(currentProjects, projectForm);\n  }\n};\n\n///////////////////vvvvvvvv\nconst displayTasks = (e, projects) => {\n  let selectedProject = e.target.parentElement.id;\n\n  projects.forEach(proj => {\n    if (proj.id === selectedProject) {\n      mainHeader.textContent = proj.name;\n\n      if (proj.tasks) {\n        const oldTaskList = document.querySelector('.task-list');\n        if (mainPanel.contains(oldTaskList)) {\n          oldTaskList.remove();\n        }\n\n        const currentTasks = document.createElement('ul');\n        currentTasks.classList.add('task-list');\n\n        proj.tasks.forEach(task => {\n          currentTasks.append(createTaskContent(task));\n        })\n        mainPanel.insertBefore(currentTasks, mainForm);\n      }\n    }\n  })\n}\n\nconst displayTaskContent = (e) => {\n  let activeProjects = JSON.parse(localStorage.getItem('projects'));\n  let projectToDisplay;\n\n\n  const oldTaskList = document.querySelector('.task-list');\n\n  if (e.target.nodeName === 'H3') {\n    projectToDisplay = e.target.parentElement.id;\n\n    activeProjects.forEach(proj => {\n      if (proj.id === projectToDisplay) {\n        mainHeader.textContent = proj.name;\n\n        if (proj.tasks) {\n\n          if (mainPanel.contains(oldTaskList)) {\n            oldTaskList.remove();\n          }\n\n          const taskContainer = document.createElement('ul');\n          taskContainer.classList.add('task-list');\n\n          proj.tasks.forEach(task => {\n            taskContainer.append(createTaskContent(task));\n          })\n          mainPanel.insertBefore(taskContainer, mainForm);\n        }\n      }\n    })\n  }\n\n  if (e.target.id === 'submit-task') {\n    projectToDisplay = e.target.parentElement.parentElement.parentElement.firstElementChild.textContent;\n\n    activeProjects.forEach(proj => {\n      if (proj.name === projectToDisplay) {\n\n        if (proj.tasks) {\n\n          if (mainPanel.contains(oldTaskList)) {\n            oldTaskList.remove();\n          }\n\n          const taskContainer = document.createElement('ul');\n          taskContainer.classList.add('task-list');\n\n          proj.tasks.forEach(task => {\n            taskContainer.append(createTaskContent(task));\n          })\n          mainPanel.insertBefore(taskContainer, mainForm);\n        }\n      }\n    })\n  }\n}\n\n\n\n\n\n// Panel controller\nconst addButtonListeners = () => {\n  const applicationButtons = document.querySelectorAll('button');\n  applicationButtons.forEach(btn => {\n    btn.addEventListener('click', (e) => {\n      // Buttons in the projects panel\n      if (e.target.classList.contains('project')) {\n\n        if (e.target.id === 'add-project') {\n          showForm();\n        }\n\n        if (e.target.id === 'cancel-project') {\n          hideForm();\n        }\n\n        if (e.target.id === 'submit-project') {\n          updateCurrentProjects(e);\n          displayProjects(currentProjects);\n          hideForm();\n\n          addProjectListeners();\n        }\n      }\n    })\n  })\n}\n\nconst addProjectListeners = () => {\n  const projects = document.querySelectorAll('.project-container h3');\n  projects.forEach(proj => {\n    proj.addEventListener('click', (e) => {\n      displayTasks(e, currentProjects);\n    })\n  })\n}\n\n\ndisplayProjects(currentProjects);\naddButtonListeners();\naddProjectListeners();\n\n\n\n\n//# sourceURL=webpack://todo-list/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;