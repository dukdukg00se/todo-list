/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("// import { container } from \"webpack\";\n\n// Varaiables. Move later\nconst projectForm = document.querySelector(\"#projects-panel form\");\nconst projectTextInput = document.querySelector(\"#project-name-input\");\nconst addProjectButton = document.querySelector(\"#add-project\");\nconst projectsPanel = document.querySelector('#projects-panel');\n\nconst mainPanel = document.querySelector('main');\nconst mainHeader = document.querySelector('h1');\nconst taskForm = document.querySelector('main > form');\nconst taskTextInput = document.querySelector('#task-name-input');\nconst addTaskButton = document.querySelector('main > button');\n\n\n// Data stuff\nlet currentProjects = !localStorage.length\n  ? []\n  : JSON.parse(localStorage.getItem(\"projects\"));\n\n\nfunction Project(name) {\n  this.name = name\n  this.tasks = [\n    {\n      name: 'work',\n      details: '',\n      date: '1-1-2019'\n    }\n  ];\n}\nfunction Task(name, details, date) {\n  this.name = name;\n  this.details = details;\n  this.date = date;\n}\n\n\nconst addItem = (itemObj, container) => {\n  container.push(itemObj);\n}\nconst removeItem = (itemId, container) => {\n  for (let i = 0; i < container.length; i++) {\n    if (container[i].id === itemId) {\n      container.splice(i, 1);\n    }\n  }\n}\nconst setItemId = (type, container) => {\n  for (let i = 0; i < container.length; i++) {\n    type === 'submit-project'\n      ? (container[i].id = 'project-' + i)\n      : (container[i].id = 'task-' + i);\n  }\n}\n\n\nconst updateCurrentProjects = (e) => {\n  if (e.target.classList.contains('delete')) {\n    let projectToDelete = e.target.parentElement.id;\n    removeItem(projectToDelete, currentProjects);\n  } else {\n    let projectName = projectTextInput.value;\n    addItem(new Project(projectName), currentProjects);\n  }\n  \n  let type = e.target.id;\n  setItemId(type, currentProjects);\n  populateLocalStorage(currentProjects);\n}\n\nconst populateLocalStorage = (projects) => {\n  localStorage.setItem('projects', JSON.stringify(projects));\n};\n\n\n// Content creators\nconst createProjectContent = (projObj) => {\n  const projectListItem = document.createElement('li');\n\n  const projectContainer = document.createElement('div');\n  projectContainer.classList.add('project-container');\n  projectContainer.id = projObj.id;\n\n  const projectTitle = document.createElement('h3');\n  projectTitle.textContent = projObj.name\n\n  const deleteBtn = document.createElement('button');\n  deleteBtn.classList.add('delete');\n  deleteBtn.classList.add('project');\n  deleteBtn.textContent = 'X';\n  \n  deleteBtn.addEventListener('click', (e) => {\n    updateCurrentProjects(e);\n    // displayProjects(currentProjects);\n    display(currentProjects);\n    addProjectListeners();\n  })\n  \n  projectContainer.append(projectTitle, deleteBtn);\n  projectListItem.append(projectContainer);\n  return projectListItem;\n};\n\nconst createTaskContent = (taskObj) => {\n  const taskListItem = document.createElement('li');\n  taskListItem.classList.add('task-item');\n  const taskItemWrapper = document.createElement('div');\n  taskItemWrapper.classList.add('task-wrapper');\n  const taskInfoWrapper = document.createElement('div');\n  const taskName = document.createElement('h3');\n  const taskDetails = document.createElement('p');\n  const taskSpanWrapper = document.createElement('div');\n  const taskDate = document.createElement('span');\n  const taskUrgent = document.createElement('span');\n  const taskDeleteBtn = document.createElement('button');\n\n\n  taskName.textContent = taskObj.name;\n  taskDetails.textContent = taskObj.details;\n  taskDate.textContent = taskObj.due;\n  taskUrgent.textContent = taskObj.urgent;\n  taskDeleteBtn.textContent = 'X';\n  taskDeleteBtn.addEventListener('click', (e) => {\n    console.log(e.target);\n  })\n\n\n  taskSpanWrapper.append(taskDate, taskUrgent);\n  taskInfoWrapper.append(taskName, taskDetails);\n  taskItemWrapper.append(taskInfoWrapper, taskSpanWrapper, taskDeleteBtn);\n  taskListItem.append(taskItemWrapper);\n  \n  return taskListItem;\n}\n\n\n// Display controllers\nconst showForm = (form, input, initBtn) => {\n  form.classList.remove(\"hidden\");\n  input.focus();\n  initBtn.classList.add(\"hidden\");\n};\nconst hideForm = (form, initBtn) => {\n  form.reset();\n  form.classList.add(\"hidden\");\n  initBtn.classList.remove(\"hidden\");\n};\n\n// const displayProjects = (projects) => {\n//   // console.log(projects);\n//   if (projects) {\n//     const oldProjectsList = document.querySelector('#project-list');\n//     if (projectsPanel.contains(oldProjectsList)) {\n//       oldProjectsList.remove();\n//     }\n\n//     const currentProjects = document.createElement('ul');\n//     currentProjects.id = 'project-list';\n//     projects.forEach(proj => {\n//       currentProjects.append(createProjectContent(proj));\n//     })\n//     projectsPanel.insertBefore(currentProjects, projectForm);\n//   }\n// };\n\n// const displayTasks = (tasks) => {\n//   if (tasks) {\n//     const oldTaskList = document.querySelector('#task-list');\n//     if (mainPanel.contains(oldTaskList)) {\n//       oldTaskList.remove();\n//     }\n\n//     const currentTasks = document.createElement('ul');\n//     currentTasks.id = 'task-list';\n//     tasks.forEach(task => {\n//       currentTasks.append(createTaskContent(task));\n//     })\n//     mainPanel.insertBefore(currentTasks, taskForm);\n//   }\n// }\n\nconst display = (list) => {\n\n  if (list) {\n    // Check if list is a list of projects by checking if first item contains a tasks property\n    let isProject = !!list[0].tasks;\n    let oldList;\n    let listId;\n    let container;\n    let form;\n\n    if (isProject) {\n      oldList = document.querySelector('#project-list');\n      listId = 'project-list';\n      container = projectsPanel;\n      form = projectForm;\n    } else {\n      oldList = document.querySelector('#task-list');\n      listId = 'task-list';\n      container = mainPanel;\n      form = taskForm;\n    }\n\n    if (container.contains(oldList)) {\n      oldList.remove();\n    }\n\n    const currentList = document.createElement('ul');\n    currentList.id = listId;\n    list.forEach(item => { \n      currentList.append(\n        isProject ? createProjectContent(item) : createTaskContent(item)\n      );\n    })\n\n    container.insertBefore(currentList, form);\n  }\n}\n\n// const display = (list, e) => {\n//   console.log(list);\n//   if (list) {\n//     let isProject= e.target.classList.contains('project');\n//     let oldList;\n//     let listId;\n//     let container;\n//     let form;\n\n//     if (isProject) {\n//       oldList = document.querySelector('#project-list');\n//       listId = 'project-list';\n//       container = projectsPanel;\n//       form = projectForm;\n//     } else {\n//       oldList = document.querySelector('#task-list');\n//       listId = 'task-list';\n//       container = mainPanel;\n//       form = taskForm;\n//     }\n\n//     if (container.contains(oldList)) {\n//       oldList.remove();\n//     }\n\n//     const currentList = document.createElement('ul');\n//     currentList.id = listId;\n//     list.forEach(item => { \n//       currentList.append(\n//         isProject ? createProjectContent(item) : createTaskContent(item)\n//       );\n//     })\n\n//     container.insertBefore(currentList, form);\n//   }\n// }\n\n\n// Listeners\n\n\n\n\nconst addButtonListeners = () => {\n  const applicationButtons = document.querySelectorAll('button');\n  applicationButtons.forEach(btn => {\n    btn.addEventListener('click', (e) => {\n      // Buttons in the projects panel\n      if (e.target.classList.contains('project')) {\n\n        if (e.target.id === 'add-project') {\n          showForm(projectForm, projectTextInput, addProjectButton);\n        }\n\n        if (e.target.id === 'cancel-project') {\n          hideForm(projectForm, addProjectButton);\n        }\n\n        if (e.target.id === 'submit-project') {\n          updateCurrentProjects(e);\n          // displayProjects(currentProjects);\n          display(currentProjects)\n          hideForm(projectForm, addProjectButton);\n          addProjectListeners();\n        }\n      }\n\n      if (e.target.classList.contains('task')) {\n\n        if (e.target.id === 'add-task') {\n          showForm(taskForm, taskTextInput, addTaskButton);\n        }\n\n        if (e.target.id === 'cancel-task') {\n          hideForm(taskForm, addTaskButton);\n        }\n      }\n    })\n  })\n}\n\nconst addProjectListeners = () => {\n  const projects = document.querySelectorAll('.project-container h3');\n  projects.forEach(proj => {\n    proj.addEventListener('click', (e) => {\n      projectToDisplay = e.target.parentElement.id;\n      currentProjects.forEach(proj => {\n        if (proj.id === projectToDisplay) {\n          mainHeader.textContent = proj.name;\n          display(proj.tasks);\n          hideForm(taskForm, addTaskButton);\n        }\n      })\n    })\n  })\n}\n\n\ndisplay(currentProjects);\naddButtonListeners();\naddProjectListeners();\n\n\n\n\n//# sourceURL=webpack://todo-list/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;