/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("// Varaiables. Move later\nconst projectsPanel = document.querySelector('#projects-panel');\nconst projectForm = document.querySelector(\"#projects-panel form\");\nconst addProjectButton = document.querySelector(\"#add-project\");\nconst projectNameInput = document.querySelector(\"#project-name-input\");\n\nconst mainPanel = document.querySelector('main');\nconst mainHeader = document.querySelector('h1');\nconst taskForm = document.querySelector('main > form');\nconst addTaskButton = document.querySelector('main > button');\nconst taskNameInput = document.querySelector('#task-name-input');\nconst taskDetailsInput = document.querySelector('#task-details-input');\nconst taskDateInput = document.querySelector('#task-date-input');\nconst taskUrgentInput = document.querySelector('#task-urgent-input');\nconst taskSubmitButton = document.querySelector('#submit-task');\n\n// Data stuff\nlet currentProjects = !localStorage.length\n  ? []\n  : JSON.parse(localStorage.getItem(\"projects\"));\n\n\nfunction Project(name) {\n  this.name = name;\n  this.tasks = [\n    // {\n    //   name: 'work',\n    //   details: 'carrots, eggs, milk',\n    //   due: '1-1-2019',\n    //   urgent: false,\n    //   id: 'work-task-0'\n    // },\n    // {\n    //   name: 'shop',\n    //   details: '',\n    //   due: '',\n    //   urgent: false,\n    //   id: 'shop-task-1'\n    // }\n  ];\n}\nfunction Task(name, details, due, urgent) {\n  this.name = name;\n  this.details = details;\n  this.due = due;\n  this.urgent = urgent;\n}\n\n\nconst addItem = (itemObj, container) => {\n  // console.log(container);\n  container.push(itemObj);\n}\nconst removeItem = (itemId, container) => {\n  for (let i = 0; i < container.length; i++) {\n    if (container[i].id === itemId) {\n      container.splice(i, 1);\n    }\n  }\n}\nconst setItemId = (prefix, container) => {\n  for (let i = 0; i < container.length; i++) {\n    container[i].id = prefix + i;\n\n  }\n}\n\n// const setItemId = (isProject, container) => {\n//   for (let i = 0; i < container.length; i++) {\n//     isProject === true\n//       ? (container[i].id = 'project-' + i)\n//       : (container[i].id = container[i].id + '-task-' + i); \n//   }\n// }\n\nconst updateCurrentProjects = (e) => {\n  if (e.target.classList.contains('delete')) {\n    let projectToDelete = e.target.parentElement.id;\n    removeItem(projectToDelete, currentProjects);\n  } else {\n    let projectName = projectNameInput.value;\n    addItem(new Project(projectName), currentProjects);\n  }\n  \n  // let isProject = e.target.classList.contains('project');\n  // setItemId(isProject, currentProjects);\n  // populateLocalStorage(currentProjects);\n}\nconst populateLocalStorage = (projects) => {\n  localStorage.setItem('projects', JSON.stringify(projects));\n};\n\n// Can I combine updateCurrentProjects and updateTasks into one function?\nconst updateTasks = (container) => {\n  let taskName = taskNameInput.value;\n  let taskDetails = taskDetailsInput.value;\n  let taskDue = taskDateInput.value;\n  let taskUrgent = taskUrgentInput.checked;\n\n  addItem(new Task(taskName, taskDetails, taskDue, taskUrgent), container)\n}\n\n/*\nconst updateTasks = (e) => {\n  // console.log(currentProjects); \n  if (e.target.classList.contains('delete')) {\n    let taskToDelete = e.target.parentElement.id;\n  } else {\n    let taskName = taskNameInput.value;\n    let taskDetails = taskDetailsInput.value;\n    let taskDue = taskDateInput.value;\n    let taskUrgent = taskUrgentInput.checked;\n  }\n\n  // currentProjects.forEach(proj => { \n  //   proj.tasks.forEach(task => {\n  //     if (task.id === taskToDelete) {\n  //       removeItem(taskToDelete, proj.tasks)\n  //       console.log(proj.tasks.length);\n\n  //       let isProject = e.target.classList.contains('project');\n  //       setItemId(isProject, proj.tasks);\n  //       populateLocalStorage(currentProjects);\n  //     }\n\n  //   })\n  // })\n}\n*/\n\n\n// Content creators\nconst createProjectContent = (projObj) => {\n  const projectListItem = document.createElement('li');\n  projectListItem.classList.add('project-item');\n\n  const projectWrapper = document.createElement('div');\n  projectWrapper.classList.add('project-wrapper');\n  projectWrapper.id = projObj.id;\n\n  const projectTitle = document.createElement('h3');\n  projectTitle.textContent = projObj.name\n\n  const projectDeleteBtn = document.createElement('button');\n  projectDeleteBtn.classList.add('delete');\n  projectDeleteBtn.classList.add('project');\n  projectDeleteBtn.textContent = 'X';\n  \n  projectDeleteBtn.addEventListener('click', (e) => {\n    updateCurrentProjects(e);\n    // Reset project Id's after deleting project\n    setItemId('project-', currentProjects);\n    //Reset task Id's within each project after deleting project\n    currentProjects.forEach(proj => {\n      let itemIdPrefix = `${proj.id}-task-`;\n      setItemId(itemIdPrefix, proj.tasks);\n    })\n    populateLocalStorage(currentProjects);\n    \n    display(currentProjects);\n    addProjectListeners();\n  })\n  \n  projectWrapper.append(projectTitle, projectDeleteBtn);\n  projectListItem.append(projectWrapper);\n  return projectListItem;\n};\nconst createTaskContent = (taskObj) => {\n  const taskListItem = document.createElement('li');\n  taskListItem.classList.add('task-item');\n\n  const taskWrapper = document.createElement('div');\n  taskWrapper.classList.add('task-wrapper');\n  taskWrapper.id = taskObj.id;\n\n  const taskInfoWrapper = document.createElement('div');\n  const taskName = document.createElement('h3');\n  const taskDetails = document.createElement('p');\n  const taskSpanWrapper = document.createElement('div');\n  const taskDue = document.createElement('span');\n  const taskUrgent = document.createElement('span');\n  const taskDeleteBtn = document.createElement('button');\n  taskDeleteBtn.classList.add('delete');\n  taskDeleteBtn.classList.add('task');\n\n  taskName.textContent = taskObj.name;\n  taskDetails.textContent = taskObj.details;\n  taskDue.textContent = taskObj.due;\n  taskUrgent.textContent = taskObj.urgent;\n  taskDeleteBtn.textContent = 'X';\n  taskDeleteBtn.dataset.delete = taskObj.id;\n\n  taskDeleteBtn.addEventListener('click', (e) => {\n    let taskToDelete = e.target.dataset.delete;\n    currentProjects.forEach(proj => {\n      proj.tasks.forEach(tasks => {\n        if (tasks.id === taskToDelete) {\n          removeItem(taskToDelete, proj.tasks);\n          let itemIdPrefix = `${proj.id}-task-`;\n          setItemId(itemIdPrefix, proj.tasks);\n          populateLocalStorage(currentProjects);\n\n          display(proj.tasks, false);\n        }\n      })\n    })\n  })\n\n  taskSpanWrapper.append(taskDue, taskUrgent);\n  taskInfoWrapper.append(taskName, taskDetails);\n  taskWrapper.append(taskInfoWrapper, taskSpanWrapper, taskDeleteBtn);\n  taskListItem.append(taskWrapper);\n  \n  return taskListItem;\n}\n\n\n// Display controllers\nconst showForm = (form, input, initBtn) => {\n  form.classList.remove(\"hidden\");\n  input.focus();\n  initBtn.classList.add(\"hidden\");\n};\nconst hideForm = (form, initBtn) => {\n  form.reset();\n  form.classList.add(\"hidden\");\n  initBtn.classList.remove(\"hidden\");\n};\nconst display = (list, isProject = true) => {\n  let oldList;\n  let listId;\n  let container;\n  let form;\n\n  if (isProject) {\n    oldList = document.querySelector('#project-list');\n    listId = 'project-list';\n    container = projectsPanel;\n    form = projectForm;\n  } else {\n    oldList = document.querySelector('#task-list');\n    listId = 'task-list';\n    container = mainPanel;\n    form = taskForm;\n  }\n\n  if (container.contains(oldList)) {\n    oldList.remove();\n  }\n\n  const currentList = document.createElement('ul');\n  currentList.id = listId;\n  list.forEach(item => { \n    currentList.append(\n      isProject ? createProjectContent(item) : createTaskContent(item)\n    );\n  })\n\n  container.insertBefore(currentList, form);\n}\n\n\n// Listeners\nconst addButtonListeners = () => {\n  const applicationButtons = document.querySelectorAll('button');\n  // console.log(applicationButtons);\n  applicationButtons.forEach(btn => {\n    btn.addEventListener('click', (e) => {\n      // Buttons in the projects panel\n      if (e.target.classList.contains('project')) {\n\n        if (e.target.id === 'add-project') {\n          showForm(projectForm, projectNameInput, addProjectButton);\n        }\n\n        if (e.target.id === 'cancel-project') {\n          hideForm(projectForm, addProjectButton);\n        }\n\n        if (e.target.id === 'submit-project') {\n          updateCurrentProjects(e);\n          setItemId('project-', currentProjects);\n          populateLocalStorage(currentProjects);\n\n          display(currentProjects);\n          hideForm(projectForm, addProjectButton);\n          addProjectListeners();\n        }\n      }\n\n      if (e.target.classList.contains('task')) {\n\n        if (e.target.id === 'add-task') {\n          showForm(taskForm, taskNameInput, addTaskButton);\n        }\n\n        if (e.target.id === 'cancel-task') {\n          hideForm(taskForm, addTaskButton);\n        }\n\n        if (e.target.id === 'submit-task') {\n          let taskName = taskNameInput.value;\n          let taskDetails = taskDetailsInput.value;\n          let taskDue = taskDateInput.value;\n          let taskUrgent = taskUrgentInput.checked;\n\n          let targetProject = e.target.dataset.submitTaskTo;\n          currentProjects.forEach(proj => {\n            if (proj.id === targetProject) {\n              addItem(new Task(taskName, taskDetails, taskDue, taskUrgent), proj.tasks);\n\n              let itemIdPrefix = `${proj.id}-task-`;\n              setItemId(itemIdPrefix, proj.tasks);\n              populateLocalStorage(currentProjects);\n\n              display(proj.tasks, false);\n              hideForm(taskForm, addTaskButton);\n            }\n          })\n        }\n      }\n    })\n  })\n}\n\nconst addProjectListeners = () => {\n  const projects = document.querySelectorAll('.project-wrapper h3');\n  projects.forEach(proj => {\n    proj.addEventListener('click', (e) => {\n      // console.log('test');\n\n      projectToDisplay = e.target.parentElement.id;\n      currentProjects.forEach(proj => {\n        if (proj.id === projectToDisplay) {\n          mainHeader.textContent = proj.name;\n\n          taskSubmitButton.dataset.submitTaskTo = proj.id;\n\n          display(proj.tasks, false);\n          hideForm(taskForm, addTaskButton);\n        }\n      })\n    })\n  })\n}\n\n\ndisplay(currentProjects);\naddButtonListeners();\naddProjectListeners();\n\n\n\n\n//# sourceURL=webpack://todo-list/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;